Firestore:
    "users" Collection:
        Name: uid

        Contains public info about user: username
        "private_data" sub-collection:
            Name: "user_activities"
                Contains array of activity ids: activities
                Contains number of activities: activity_count

            Name: "readonly"
                Contains readonly private data about user: next_action_time

    "activities" Collection:
        Name: activity id

        Contains full data about the activity: time, name
        Contains map "users":
            key: uid
            value: userData document data

        "users" sub-collection:
            name: uid

            Contains data about the user in the activity: role, coming, username

Cloud Functions:
    onUserRemoved:
        fireStore onDelete: "activities/{activity}/users/{userData}"
        Removes user from users list
        If user is last user, remove activity
        If user is owner, removes all other users aswell

    onUserAdded:
        fireStore onCreate': "activities/{activity}/users/{userData}"
        Updates activity document

    onUserDataChanged:
        fireStore onUpdate: "activities/{activity}/users/{userData}"
        Updates the users userActivity and the activity document

    createActivity:
        HTTPS Callable
        Arguments: activityData: name, time
        Creates a new activity with user as owner
        returns: the id of the activity

    joinActivity:
        HTTPS Callable
        Arguments: activityID: id
        Adds the userData to the activity

    activityExists:
        HTTPS Callable
        Arguments: activityID: id
        returns true or false

    inviteToActivity:
        HTTPS Callable
        Arguments: activityID, uid
        Only owner: adds user userData

    NOTES: Owner kick: remove userData document -> onUserRemoved
           Owner invite: inviteToActivity -> onUserAdded
           Join: Call joinActivity -> onUserAdded
           Leave: remove userData document -> onUserRemoved